# функция - полноправный объект
# внутренняя функция может вызывать переменные из внешней


def outer(a):
    def inner(b):
        print(f"a + b = ", a + b)

    inner(2)


def logger(func):
    def wrapper(*args):
        print(f"Function {func.__name__} started")
        result = func(*args)
        print(f"Function {func.__name__} finished")
        return result

    return wrapper


@logger
def summ(a, b):
    print(f"Summ = ", a + b)
    return a + b


if __name__ == '__main__':
    outer(5)

    # ниже 3 варианта вызова функции logger без указания, что это декоратор
    # function = logger(summ)
    # print(function(3, 4))

    # print(logger(summ)(3, 4))

    # new_summ = logger(summ)
    # print(new_summ(3, 4))

    print(summ(3, 4))

# Задания:
# измерить время выполнения функций
# узнать количество запусков функции
# Декоратор для замера времени выполнения функции.
# Декоратор для логирования вызовов функции и аргументов.
# Декоратор для проверки аргументов функции на корректность.
# Декоратор для кэширования результатов функции, чтобы избежать повторных вычислений.
# Декоратор для ограничения количества вызовов функции в определенный интервал времени.
# Декоратор для авторизации, чтобы проверить доступ к определенным функциям только у авторизованных пользователей.
# Декоратор для перехвата и обработки исключений в функции.
